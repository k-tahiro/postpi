##################################################
# Utility functions
##################################################
function util::check_md5() {
  local file="$1"

  if [[ -f "${file}.md5" && $(md5sum -c "${file}.md5") ]]; then
    return 0
  fi
  md5sum "${file}" >"${file}.md5"
  return 1
}

##################################################
# Raspberry Pi functions
##################################################
function rpi::camera() {
  local tmp_file="$(mktemp)"
  raspistill -vf -hf -o "${tmp_file}" -w 640 -h 480 1>&2  # for logging
  echo "${tmp_file}"  # for return value
}

##################################################
# Slack functions
##################################################
readonly SLACK_FILE_UPLOAD_URL="https://slack.com/api/files.upload"
source "${SRC_DIR}/slack.conf"

function slack::upload_file() {
  local file="$1"
  local response="$(curl -fsL \
                         -F "token=${SLACK_OAUTH_TOKEN}" \
                         -F "channels=${SLACK_CHANNEL_ID}" \
                         -F "file=@${file}" \
                         -F "filename=$(basename "${file}")" \
                         "${SLACK_FILE_UPLOAD_URL}")"
  echo "${response}" | tee -a "${LOG_FILE}" | python -c 'import sys; import json; sys.exit(0 if json.loads(raw_input())["ok"] else 1)'
}

function slack::create_payload() {
  local text="$1"
  cat <<EOF
{
  "text": "${text}",
  "blocks": []
}
EOF
}

function slack::post() {
  local text="$1"
  local payload="$(slack::create_payload "${text}")"
  curl -fsL -X POST --data "${payload}" "${SLACK_WEBHOOK_URL}"
}

##################################################
# Witty Pi 3 functions
##################################################
function witty::schedule() {
  if util::check_md5 "${SRC_DIR}/schedule.wpi"; then
    return 0
  fi
  expect -c "
  spawn \"/home/pi/wittypi/wittyPi.sh\"
  expect \"What do you want to do? (1~11)\"
  send \"6\n\"
  expect \"Which schedule script do you want to use? (1~7)\"
  send \"6\n\"
  expect \"What do you want to do? (1~11)\"
  send \"11\n\"
  "
}

function witty::parameter() {
  local interval="${1:-4}"
  local wl_duration="${2:-100}"
  local dm_duration="${3:-0}"

  expect -c "
  spawn \"/home/pi/wittypi/wittyPi.sh\"
  expect \"What do you want to do? (1~11)\"
  send \"9\n\"
  expect \"Which parameter to set? (1~8)\"
  send \"3\n\"
  expect \"Input new interval (1,2,4 or 8: value in seconds):\"
  send \"${interval}\n\"
  expect \"What do you want to do? (1~11)\"
  send \"9\n\"
  expect \"Which parameter to set? (1~8)\"
  send \"4\n\"
  expect \"Input new duration for white LED (0~255):\"
  send \"${wl_duration}\n\"
  expect \"What do you want to do? (1~11)\"
  send \"9\n\"
  expect \"Which parameter to set? (1~8)\"
  send \"5\n\"
  expect \"Input new duration for dummy load (0~255):\"
  send \"${dm_duration}\n\"
  expect \"What do you want to do? (1~11)\"
  send \"11\n\"
  "
}

function witty::parameter_from_file() {
  local file="$1"
  if util::check_md5 "${file}"; then
    return 0
  fi

  source "${file}"
  witty::parameter "${WITTY_PULSING_INTERVAL}" "${WITTY_WHITE_LED_DURATION}" "${WITTY_DUMMY_LOAD_DURATION}"
}
